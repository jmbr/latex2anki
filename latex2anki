#!/usr/bin/env python

import argparse
try:
    import argcomplete
except ImportError:
    argcomplete = None
import html
import logging
import json
import requests
import sys

from TexSoup import TexSoup


DEFAULT_HOST = 'localhost'
DEFAULT_PORT = 8765
DEFAULT_VERSION = 6
DEFAULT_MODEL_NAME = 'Basic'


class AnkiConnectError(Exception):
    """Error in anki-connect request."""
    pass


class AnkiConnect:
    def __init__(self, host=DEFAULT_HOST, port=DEFAULT_PORT):
        self.host = host
        self.port = port
        self.url = 'http://{}:{}'.format(host, port)

    def send(self, **kwargs):
        """Send request using the anki-connect protocol."""
        kwargs.setdefault('version', DEFAULT_VERSION)
        request = requests.post(self.url, json=kwargs)
        response = json.loads(request.text)
        if response['error'] is not None:
            raise AnkiConnectError(response['error'])
        return response['result']

    def add_note(self, deck_name, front_text, back_text, tags=[]):
        """Add a note to a deck."""
        params = {'note': {'deckName': deck_name,
                           'modelName': DEFAULT_MODEL_NAME,
                           'fields': {'Front': front_text, 'Back': back_text},
                           'tags': tags}}
        return self.send(action='addNote', params=params)

    def update_note_fields(self, note_id, front_text, back_text):
        """Update fields of a given note."""
        params = {'note': {'id': note_id,
                           'fields': {'Front': front_text, 'Back': back_text}}}
        return self.send(action='updateNoteFields', params=params)

    def find_notes(self, deck_name):
        """Return all the note IDs of a deck."""
        params = {'query': 'deck:{}'.format(deck_name)}
        return self.send(action='findNotes', params=params)

    def create_deck(self, deck_name):
        """Create deck."""
        params = {'deck': deck_name}
        return self.send(action='createDeck', params=params)

    def upgrade_anki_connect(self):
        """Upgrade anki-connect."""
        return self.send(action='upgrade')


class LaTeX2AnkiError(Exception):
    """Error during LaTeX to Anki conversion."""
    pass


class LaTeX2Anki:
    def __init__(self, args, log):
        self.args = args
        self.log = log
        self.texsoup = TexSoup(args.file)
        self.anki_connect = AnkiConnect(args.host, args.port)

    def notes_dict(self, deck):
        """Construct a dictionary of notes indexed by front text."""
        note_ids = self.anki_connect.find_notes(deck)
        notes_info = self.anki_connect.send(action='notesInfo',
                                            params={'notes': note_ids})
        # print(note_ids)
        # print(notes_info)
        return {n['fields']['Front']['value']: n for n in notes_info}

    def upgrade(self):
        self.anki_connect.upgrade()

    def convert(self):
        """Convert to Anki."""
        ts = self.texsoup
        ac = self.anki_connect
        log = self.log
        args = self.args

        deck_names = ac.send(action='deckNames')
        log.debug('Found decks: {}'.format(deck_names))

        if args.deck not in deck_names:
            ac.create_deck(args.deck)
            if args.verbose:
                log.info('Deck {!r} created.'.format(args.deck))

        if args.upgrade:
            notes_dict = self.notes_dict(args.deck)

        for flashcard in ts.find_all('flashcard'):
            front_text = html.escape(flashcard.args[0].string)
            contents = ''.join(str(c) for c in flashcard.contents)
            back_text = '[latex]\n{}\n[/latex]\n'.format(html.escape(contents))

            response = ac.add_note(args.deck, front_text, back_text)
            if response:
                log.debug('Added {!r} ({})'.format(flashcard.args[0], response))
            else:
                if args.upgrade:
                    try:
                        note_id = notes_dict[front_text]['noteId']
                        ac.update_note_fields(note_id, front_text, back_text)
                        log.debug('Upgraded {!r} ({})'
                                  .format(flashcard.args[0], note_id))
                    except KeyError:
                        log.error('Unable to find {!r}.'
                                  .format(flashcard.args[0]))
                else:
                    log.debug('Ignored {!r}'.format(flashcard.args[0]))


def main():
    parser = argparse.ArgumentParser(description='convert LaTeX flash cards to'
                                     ' Anki')
    parser.add_argument('file', metavar='FILE',
                        type=argparse.FileType('r', encoding='utf-8'),
                        help='LaTeX file containing the flash cards')
    parser.add_argument('--host', '-t', required=False, type=str,
                        default=DEFAULT_HOST, help='address of anki-connect '
                        'server (default is %(default)s)')
    parser.add_argument('--port', '-p', required=False, type=int,
                        default=DEFAULT_PORT, help='port of anki-connect '
                        'server (default is %(default)s)')
    parser.add_argument('--deck', '-d', type=str, required=False,
                        default='Default', help='name of deck where the '
                        'cards will be imported (default is \'%(default)s\')')
    parser.add_argument('--verbose', '-v', required=False, default=False,
                        action='store_true', help='be verbose')
    parser.add_argument('--upgrade', '-u', required=False, default=False,
                        action='store_true', help='upgrade if cards already '
                        'exist')
    parser.add_argument('--upgrade-anki-connect', required=False, default=False,
                        action='store_true', help='upgrade anki-connect within Anki')

    if argcomplete:
        argcomplete.autocomplete(parser)

    args = parser.parse_args(sys.argv[1:])

    logging.basicConfig(format='%(message)s')
    log = logging.getLogger(name='latex2anki')
    log.setLevel(logging.DEBUG if args.verbose else logging.INFO)

    l2a = LaTeX2Anki(args, log)
    if args.upgrade_anki_connect:
        l2a.anki_connect.upgrade_anki_connect()
    l2a.convert()


if __name__ == '__main__':
    main()
